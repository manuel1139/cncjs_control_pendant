#!/usr/bin/env node

var SPI = require('pi-spi');


var spi = SPI.initialize("/dev/spidev0.1");

var test = Buffer.from("\x00BB9;1240;-8812;922\0");

spi.clockSpeed(1000000);
//spi.dataMode(SPI.mode.CPOL);
//spi.bitOrder(SPI.order.LSB_FIRST);


async function f() {
  console.log("starting");
  while(1) {
    for( i=0; i<=55; i++) {
    await sleep(10);
     let f = i + 0x0 + ";1234;4321;6666" + 0x00; 
       s = new Buffer([0x02,0x00,0x55,0x56, 
		      i+ 0x3b,0x31,0x32,0x3B, 
                      i+ 0x33, i+ 0x35,0x3b,0x35,
		      0x3b,0x74,0x2F,0x72,
                      0x00,0x00,0x01,0x00,
                      0x01,0x92,0xCD,0x00,
                      0x00,0x00,0x2F,0x6D,
                      0x6E,0x74,0x2F,0x72]);
s = Buffer.from("\02\00Hello Slave!");
//b = Buffer.from("\03\00HelloXXXX Slave!");
b = Buffer.from("\03");
//	console.log(s);

//       spi.write(s, function (e,d) { console.log(d) })
//       spi.write(b, function (e,d) { console.log(d) })

  spi.transfer(s, 32, function (e,d) { console.log(d.toString()) })
  spi.transfer(b, 32, function (e,d) { console.log(d.toString()) })
//  spi.transfer(s, 32, function (e,d) { console.log(d) })
 // spi.read( 32, function (e,d) { console.log(d) })

       } 
   }
}

// reads and writes simultaneously
// e.g. jumper MOSI [BCM 10, physical pin 19] to MISO [BCM 9, physical pin 21]

 f();
/*
while(1) {

*/
function sleep(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
} 

